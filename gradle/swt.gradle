
public String getSWTWindowingLibrary(String platform) {
  switch (platform.replaceAll(' ', '').toLowerCase()) {
    case ~/.*linux.*/:  return 'gtk'
    case ~/.*darwin.*/: return 'cocoa'
    case ~/.*osx.*/:    return 'cocoa'
    case ~/.*win.*/:    return 'win32'
    default:            return null
  }
}

public String getSWTArch(String arch) {
  switch(arch) {
    case ~/.*64.*/: return 'x86_64'
    default:        return 'x86'
  }
}

public String getSWTPlatform(String platform) {
  switch(platform.replaceAll(' ', '').toLowerCase()) {
    case ~/.*linux.*/:  return 'linux'
    case ~/.*darwin.*/: return 'macosx'
    case ~/.*osx.*/:    return 'macosx'
    case ~/.*win.*/:    return 'win32'
    default:            return platform
  }
}

ext {
  if ( project.ext.has('forceArch')) {
    // use like: gradle swtDiag -PforceArch=win64
    println 'target architecture forced to: ' + forceArch
    switch(forceArch) {
      case 'win32':
	swtWindowingLibrary = 'win32'
	swtArch = 'x86'
	swtPlatform = 'win32'
	break
      case 'win64':
	swtWindowingLibrary = 'win32'
	swtArch = 'x86_64'
	swtPlatform = 'win32'
	break
      case 'macosx':
	swtWindowingLibrary = 'cocoa'
	swtArch = 'x86_64'
	swtPlatform = 'macosx'
	break
      case 'linux64':
	swtWindowingLibrary = 'gtk'
	swtArch = 'x86_64'
	swtPlatform = 'linux'
	break
      default: throw new InvalidUserDataException("Invalid arch to force: use win32/win64/macosx/linux64")
    }
    archSpec = forceArch
  } else {
    swtWindowingLibrary = getSWTWindowingLibrary(System.properties['os.name'])
    swtArch = getSWTArch(System.properties['os.arch'])
    swtPlatform = getSWTPlatform(System.properties['os.name'])
    archSpec = 'defaultarch'
  }
}